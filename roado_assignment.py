# -*- coding: utf-8 -*-
"""Roado Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tZ0FVmRsHDhatZhghZtSAlgSwGhsp9Qe
"""

# Importing All Requires Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style="whitegrid")

# Load The Dataset
df=pd.read_csv('Sales_Tax_Collections.csv')

df.head(10)

df.shape

df.info()

df.describe()

data=df.copy

# Drop Irrelevant Columns
df.drop(columns=["ID"], inplace=True)

#Clean & Rename Column Names
df.columns = df.columns.str.strip().str.lower().str.replace(" ", "_").str.replace("-", "_").str.replace("(", "").str.replace(")", "")

df.head(5)

# Check the Null Value Present or Not
df.isnull().sum()

# Convert Data Types of Date Column
df['month'] = df['month'].astype(str)

df['date'] = pd.to_datetime(
    df['year'].astype(str) + "-" + df['month'], format="%Y-%B"
)

# Store the Created Date column
cols = ['date'] + [col for col in df.columns if col != 'date']
df = df[cols]

df.head(5)

# Check the Duplicate Value Present or Not
df.duplicated().sum()

# Remove the Outliers
num_columns = df.select_dtypes(include=['int64','float64']).columns

for col in num_columns:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    lower = Q1 - 1.5 * IQR
    upper = Q3 + 1.5 * IQR
    df = df[(df[col] >= lower) & (df[col] <= upper)]

# Reset index after cleaning
df.reset_index(drop=True, inplace=True)

df.shape

# Export Cleaned Data
df.to_csv("cleaned_sales_tax_data.csv", index=False)

# Trend of Total Tax Collection Over Time
plt.figure(figsize=(12,5))
plt.plot(df['date'], df['city_parish_total_tax_collections'])
plt.title("Total City-Parish Tax Collection Over Time")
plt.xlabel("Date")
plt.ylabel("Total Tax Collections")
plt.xticks(rotation=45)
plt.show()

# City and Parish Tax Trend
plt.figure(figsize=(12,5))
plt.plot(df['date'], df['city_total_tax_collections'], label="City Tax")
plt.plot(df['date'], df['parish_total_tax_collections'], label="Parish Tax")
plt.title("City vs Parish Tax Collection Trend")
plt.xlabel("Date")
plt.ylabel("Tax Collection")
plt.legend()
plt.xticks(rotation=45)
plt.show()

# Average Tax Collection by Month
monthly_avg = df.groupby('month')['city_parish_total_tax_collections'].mean().reindex([
    "January","February","March","April","May","June",
    "July","August","September","October","November","December"
])

plt.figure(figsize=(10,5))
monthly_avg.plot(kind="bar")
plt.title("Average Monthly Tax Collections")
plt.ylabel("Average Collection")
plt.xlabel("Month")
plt.xticks(rotation=45)
plt.show()

# Quarterly Tax Comparison
data = df.copy()
data['quarter'] = data['date'].dt.quarter
quarterly = data.groupby('quarter')['city_parish_total_tax_collections'].sum()

plt.figure(figsize=(7,5))
quarterly.plot(kind='bar')
plt.title("Quarterly Tax Collection Comparison")
plt.ylabel("Total Tax Collection")
plt.xlabel("Quarter")
plt.show()

# City and Parish Contribution
values = [
    data['city_total_tax_collections'].sum(),
    data['parish_total_tax_collections'].sum()
]
labels = ["City", "Parish"]

plt.figure(figsize=(6,6))
plt.pie(values, labels=labels, autopct="%1.1f%%")
plt.title("City vs Parish Tax Contribution")
plt.show()

# Correlation of Revenue Columns
plt.figure(figsize=(10,6))
sns.heatmap(data.select_dtypes(include=np.number).corr(), annot=True, fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

# Outlier Detection
plt.figure(figsize=(12,6))
sns.boxplot(data=data[['city_total_tax_collections','parish_total_tax_collections','city_parish_total_tax_collections']])
plt.title("Outlier Detection in Tax Collections")
plt.show()

# Cumulative Tax Collection Trend
df['cumulative_tax'] = df['city_parish_total_tax_collections'].cumsum()

plt.figure(figsize=(12,5))
plt.fill_between(df['date'], df['cumulative_tax'])
plt.title("Cumulative Tax Collection Over Time")
plt.xlabel("Date")
plt.ylabel("Cumulative Tax Collection")
plt.xticks(rotation=45)
plt.show()



